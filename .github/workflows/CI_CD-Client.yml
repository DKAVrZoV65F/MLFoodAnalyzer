name: CI/CD Client ðŸ§ªðŸš€

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

env:
  DOTNET_NOLOGO: true                     # Disable the .NET logo
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true # Disable the .NET first time experience
  DOTNET_CLI_TELEMETRY_OPTOUT: true       # Disable sending .NET CLI telemetry
  DOTNET_VERSION: '8.0.x'                 # Version .NET
  DOTNET_INSTALL_DIR: '.\.dotnet'
  DOTNET_DEPENDENCIES_DIR: '~/.nuget/packages'

concurrency:
  group: CI/CD-Client-ðŸ§ªðŸš€
  cancel-in-progress: true
jobs:
  CI-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4.1.1
    - name: Cache .NET ðŸ“¦
      id: cache-dotnet
      uses: actions/cache@v4.0.1
      with:
        path: ${{ env.DOTNET_INSTALL_DIR }}
        key: ${{ runner.os }}-dotnet-8
        restore-keys: ${{ runner.os }}-dotnet-8
        
    - name: Display Cache .NET ðŸ“¦
      run: echo '${{ toJSON(steps.cache-dotnet.outputs) }}'
    - name: Setup .NET ðŸ“¦
      if: ${{ steps.cache-dotnet.outputs.cache-hit != 'true' }}
      uses: actions/setup-dotnet@v4.0.0
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Set installed/cached dotnet path [${{ env.DOTNET_INSTALL_DIR }}] ðŸ’¾
      run: echo "${{ env.DOTNET_INSTALL_DIR }}" | Out-File -FilePath $ENV:GITHUB_PATH -Encoding utf8 -Append

    - name: Cache Dependencies ðŸ“‚
      id: cache-dependencies-server
      uses: actions/cache@v4.0.1
      with:
        path: ${{ env.DOTNET_DEPENDENCIES_DIR }}
        key: ${{ runner.os }}-dotnet-dependencies-client
        restore-keys: ${{ runner.os }}-dotnet-dependencies-client
    - name: Install Dependencies ðŸ“‚
      if: ${{ steps.cache-dependencies-client.outputs.cache-hit != 'true' }}
      run: |
        dotnet workload install maui --ignore-failed-sources
        dotnet workload restore
        dotnet restore MLFoodAnalyzerClient/MLFoodAnalyzerClient.csproj
    - name: Set installed/cached dependencies path [${{ env.DOTNET_DEPENDENCIES_DIR }}] ðŸ’¾
      run: echo "${{ env.DOTNET_DEPENDENCIES_DIR }}" | Out-File -FilePath $ENV:GITHUB_PATH -Encoding utf8 -Append
        
    - name: Build ðŸ§±
      run: dotnet build 
      
    - name: Test ðŸ§ª
      run: dotnet test xU_Client --logger "trx;LogFileName=test-results-client-windows.trx" || true

    - name: Publish Test Result ðŸš€
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Report Tests Windows ðŸš€
        path: "**/test-results-client-windows.trx"
        reporter: dotnet-trx
        fail-on-error: true












# jobs:
# ***************************** #
# >>>>>>> Android build <<<<<<< #
# ***************************** #
  # CD-android:
  #   runs-on: windows-latest
    
  #   steps:
  #   - uses: actions/checkout@v4.1.1
    
  #   - name: Setup Keystore File
  #     run: |
  #       echo "${{ secrets.ANDROID_KEYSTORE_FILE }}" > myapp.keystore.asc
  #       gpg -d --passphrase "${{ secrets.ANDROID_PASSWORD_GPG }}" --batch myapp.keystore.asc > myapp.keystore

  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v4.0.0
  #     with:
  #       dotnet-version: '8.0.x'

  #   - name: Setup Java
  #     uses: actions/setup-java@v4.0.0
  #     with:
  #       distribution: 'microsoft'
  #       java-version: '11'
        
  #   - name: Install MAUI Workload
  #     run: dotnet workload install maui --ignore-failed-sources
      
  #   - name: Restore Dependencies
  #     run: dotnet restore MauiApp1/MauiApp1.csproj

  #   - name: Build MAUI Android
  #     run: dotnet publish MauiApp1/MauiApp1.csproj -f net8.0-android -c Release /p:AndroidSigningKeyStore=myapp.keystore /p:AndroidSigningKeyAlias=ghactionskey /p:AndroidSigningKeyPass="${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" /p:AndroidSigningStorePass="${{ secrets.ANDROID_PASSWORD_ALIAS }}" --no-restore

  #   - name: Upload Android Artifact
  #     uses: actions/upload-artifact@v4.3.0
  #     with:
  #       name: android-ci-build
  #       path: |
  #         ./**/*.aab
  #         ./**/*.apk

    
# ***************************** #
# >>>>>>> Windows Build <<<<<<< #
# ***************************** #
  # CD-windows:
  #   runs-on: windows-latest
  #   steps:
  #   - uses: actions/checkout@v4.1.1

  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v4.0.0
  #     with:
  #       dotnet-version: '8.0.x'

  #   - name: Install MAUI Workload
  #     run: dotnet workload install maui --ignore-failed-sources
    
  #   - name: Restore Dependencies
  #     run: dotnet restore MauiApp1/MauiApp1.csproj

  #   - name: Decrypt PFX File
  #     run: |
  #       echo "${{ secrets.WINDOWS_PFX_FILE }}" > cert.pfx.asc
  #       certutil -decode cert.pfx.asc cert.pfx
    
  #   - name: Add Cert to Store
  #     run: certutil -user -q -p ${{ secrets.WINDOWS_PFX_PASSWORD }} -importpfx cert.pfx NoRoot
    
  #   - name: Build MAUI Windows
  #     run: dotnet publish MauiApp1/MauiApp1.csproj -c Release -f:net8.0-windows10.0.19041.0 /p:GenerateAppxPackageOnBuild=true /p:AppxPackageSigningEnabled=true /p:PackageCertificateThumbprint="${{ secrets.WINDOWS_PFX_THUMBPRINT }}"
    
  #   - name: Upload Windows Artifact
  #     uses: actions/upload-artifact@v4.3.0
  #     with:
  #       name: windows-ci-build
  #       path: .\**\AppPackages\**\*.*

# ************************* #
# >>>>>>> iOS Build <<<<<<< #
# ************************* #
  # CD-ios:
  #   runs-on: macos-latest
  #   steps:
  #   - uses: actions/checkout@v4.1.1

  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v4.0.0
  #     with:
  #       dotnet-version: '8.0.x'
        
  #   - name: Install MAUI Workload
  #     run: dotnet workload install maui --ignore-failed-sources
    
  #   - name: Restore Dependencies
  #     run: dotnet restore MauiApp1/MauiApp1.csproj

  #   - name: Degub MAUI iOS project
  #     shell: bash
  #     run: dotnet build -f net8.0-ios -c Debug
  #   - name: Build MAUI iOS project
  #     shell: bash
  #     run: dotnet publish MauiApp1/MauiApp1.csproj -c Release -f:net8.0-ios  --no-restore /p:buildForSimulator=True /p:packageApp=True /p:ArchiveOnBuild=False
    
  #   - name: Upload Android Artifact
  #     uses: actions/upload-artifact@v4.3.0
  #     with:
  #       name: MauiApp1-ios-ci-build
  #       path: MauiApp1/bin/Release/net8.0-ios/iossimulator-x64/**/*.app

# ********************************* #
# >>>>>>> MacCatalyst Build <<<<<<< #
# ********************************* #
  # CD-macos:
  #   runs-on: macos-latest
  #   steps:
  #   - uses: actions/checkout@v4.1.1

  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v4.0.0
  #     with:
  #       dotnet-version: '8.0.x'

  #   - name: Install MAUI Workload
  #     run: dotnet workload install maui --ignore-failed-sources
    
  #   - name: Restore Dependencies
  #     run: dotnet restore MauiApp1/MauiApp1.csproj
      
  #   - name: Build MAUI MacCatalyst .app
  #     run: dotnet publish MauiApp1/MauiApp1.csproj -c Release -f:net8.0-maccatalyst -p:CreatePackage=false
    
  #   - name: Upload MacCatalyst Artifact
  #     uses: actions/upload-artifact@v4.3.0
  #     with:
  #       name: macos-ci-build .app
  #       path: MauiApp1/bin/Release/net8.0-maccatalyst/**/*.app/
    
